import marshal,zlib,base64
exec(base64.b64decode("+IGludChvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiSGkgLyBMb3ciXVsiSWYgV2luIl0pIC0gMToKICAgICAgICAgICAgICAgICAgcm9sZWJldCA9ICJMbyIKICAgICAgICAgICAgICAgaWYgbm9fcm9sZWJldCA+IGludChvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiSGkgLyBMb3ciXVsiSWYgV2luIl0pICogMiAtIDE6CiAgICAgICAgICAgICAgICAgIHJvbGViZXQgPSAiSGkiCiAgICAgICAgICAgICAgICAgIG5vX3JvbGViZXQgPSAwCiAgICAgICAgICAgIGlmIHN0YXRzX3JvbGViZXRfbG9zZSBpcyBUcnVlOgogICAgICAgICAgICAgICBpZiBub19yb2xlYmV0ID4gaW50KG9ialsiQ29uZmlnIl1bdXJ1dF1bIkJldCJdWyJIaSAvIExvdyJdWyJJZiBMb3NlIl0pIC0xIDoKICAgICAgICAgICAgICAgICAgcm9sZWJldCA9ICJMbyIKICAgICAgICAgICAgICAgaWYgbm9fcm9sZWJldCA+IGludChvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiSGkgLyBMb3ciXVsiSWYgTG9zZSJdKSAqIDIgLSAxOgogICAgICAgICAgICAgICAgICByb2xlYmV0ID0gIkhpIgogICAgICAgICAgICAgICAgICBub19yb2xlYmV0ID0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJvbGViZXQgPSBvYmpbIkNvbmZpZyJdW3VydXRdWyJCZXQiXVsiQmV0Il0KICAgICAgICBpZiBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJBdXRvIiBvciBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJBVVRPIiBvciBteV9uYW1lc3BhY2UuYmV0c2V0ID09ICJhdXRvIjoKICAgICAgICAgIHdha3R1ID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoJyVNJykKICAgICAgICAgIGlmIGludCh3YWt0dSkgPiBpbnQobWVuaXQgLSAxKToKICAgICAgICAgICAgIG1lbml0ID0gaW50KG1lbml0KSArIGludChvYmpbIkludGVydmFsIl0pCiAgICAgICAgICAgICB1cnV0ICs9MQogICAgICAgICAgICAgaWYgdXJ1dCA9PSBqdW1sYWh1bGFuZzoKICAgICAgICAgICAgICAgIHVydXQgPSAwCiAgICAgICAgICAgICBwcmludCAoIkNoYW5nZSBCZXQgU2V0ICIrb2JqWyJDb25maWciXVt1cnV0XVsiTmFtZSBCZXQgU2V0Il0rIiAgICAgICAgICAgICAgICAgICAgICAgICAgICIpCiAgICAgICAgICAgICBzbHAgPSBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiSW50ZXJ2YWwiXSkgLyAxMDAwCiAgICAgICAgICAgICBsaW1pdF9hID0gaW50KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJlc2V0IElmIFdpbiJdKSAtIDEKICAgICAgICAgICAgIHBheWluID0gaW50KGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIkJhc2UgQmV0Il0pKigxMCAqKiA4KSkKICAgICAgICAgICAgIGFtb3VudCA9IHBheWluCgogICAgICAgIGVsc2U6CiAgICAgICAgICB1cnV0ID0gaW50KG15X25hbWVzcGFjZS5iZXRzZXQpCgogICAgICAgIGlmIG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIkNvbmZpZyJdW3VydXRdWyJSYW5kb20gQ2hhbmNlIl1bIlRvZ2dsZSJdID09ICJPbiIgb3Igb2JqWyJDb25maWciXVt1cnV0XVsiUmFuZG9tIENoYW5jZSJdWyJUb2dnbGUiXSA9PSAib24iOgogICAgICAgICAgIGhhc2lsX2NoYW5jZSA9IHJvdW5kKHJhbmRvbS51bmlmb3JtKGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiTWluIl0pLGZsb2F0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiTWF4Il0pKSwyKQogICAgICAgICAgIGNvayA9IGxlbihzdHIoaGFzaWxfY2hhbmNlKSkKICAgICAgICAgICBpZiBjb2sgPT0gMzoKICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIrc3RyKGhhc2lsX2NoYW5jZSkrIiAgICIpCiAgICAgICAgICAgaWYgY29rID09IDQ6CiAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiK3N0cihoYXNpbF9jaGFuY2UpKyIgICIpCiAgICAgICAgICAgaWYgY29rID09IDU6CiAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiK3N0cihoYXNpbF9jaGFuY2UpKyIgIikKICAgICAgICAgICBrb252ZXJ0KGhhc2lsX2NoYW5jZSxzdHIocm9sZWJldCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICBrb252ZXJ0KG9ialsiQ29uZmlnIl1bdXJ1dF1bIkNoYW5jZSJdLHN0cihyb2xlYmV0KSkKCiAgICAgICAgdGltZS5zbGVlcChmbG9hdChzbHApKQogICAgICAgIGFtb3VudCA9IGludChhbW91bnQpCiAgICAgICAgbis9MQogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAiYSI6ICJQbGFjZUJldCIsCiAgICAgICAgICAicyI6IGpzWyJTZXNzaW9uQ29va2llIl0sCiAgICAgICAgICAiUGF5SW4iOiBhbW91bnQsCiAgICAgICAgICAiTG93IjogbG93LAogICAgICAgICAgIkhpZ2giOiBoaWdoLAogICAgICAgICAgIkNsaWVudFNlZWQiOiByYW5kaW50KDAsOTk5OTk5KSwKICAgICAgICAgICJDdXJyZW5jeSI6ICJkb2dlIiwKICAgICAgICAgICJQcm90b2NvbFZlcnNpb24iOiAiMiIKICAgICAgICB9CiAgICAgICAgaWYgcHJvZiA+IGZsb2F0KG9ialsiVGFyZ2V0IFByb2ZpdCJdKToKICAgICAgICAgICBwcmludCAoaGlqYXUrIlxuWWF5LiEgXG5Qcm9maXQgTWVuY2FwYWkgVGFyZ2V0Li4uLi4hXG4iK2hpamF1KyJQcm9maXQgIityZXMrc3RyKHByb2YpKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IFlvdSB3aW4gIitzdHIocHJvZikpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IFRvdGFsIEJhbGFuY2UgIitzdHIoZmxvYXQoaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkpLygxMCAqKiA4KSkpCiAgICAgICAgICAgc3lzLmV4aXQoKQogICAgICAgIHIxID0gYy5wb3N0KHVybCxoZWFkZXJzPXVhLGRhdGE9ZGF0YSkKICAgICAgICBqc24gPSBqc29uLmxvYWRzKHIxLnRleHQpCiAgICAgICAgcHJvZiA9IChmbG9hdChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdICsgaW50KGpzblsiUGF5T3V0Il0pIC0gaW50KGFtb3VudCkgLSBqdW1ibCkvKDEwICoqIDgpKQogICAgICAgIGp1bSA9IGludChqc25bIlBheU91dCJdKSAtIGludChhbW91bnQpCiAgICAgICAgaWYganNuWyJTdGFydGluZ0JhbGFuY2UiXSA+IHdzOgogICAgICAgICAgIHByaW50ICh1bmd1KyJbIityZXMrc3RyKHJvbGViZXQpK3VuZ3UrIl0gIitoaWphdTIrc3RyKGZsb2F0KGFtb3VudCkvKDEwICoqIDgpKSxyZXMrc3RyKGZsb2F0KGludChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdKSArIGludChqdW0pKS8oMTAgKiogOCkpLGhpamF1MisiUHJvZml0IixyZXMrc3RyKHByb2YpKQogICAgICAgICAgIHByaW50IChoaWphdSsiWWF5LiFcbkJhbGFuY2UgU3VkYWggTWVtZW51aGkgVGFyZ2V0Li4uLi4hIikKICAgICAgICAgICBvcy5zeXN0ZW0oInRlcm11eC10b2FzdCBUYXJnZXQgV2luIFN1ZGFoIFRlcmNhcGFpIikKICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtdG9hc3QgVG90YWwgQmFsYW5jZSAiK3N0cihmbG9hdChpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKSkvKDEwICoqIDgpKSkKICAgICAgICAgICBzeXMuZXhpdCgpCiAgICAgICAgaWYganNuWyJTdGFydGluZ0JhbGFuY2UiXSA8IGxzOgogICAgICAgICAgIHByaW50ICh1bmd1KyJbIityZXMrc3RyKHJvbGViZXQpK3VuZ3UrIl0iK3JlZDIrIi0iK3N0cihmbG9hdChhbW91bnQpLygxMCAqKiA4KSkscmVzK3N0cigoZmxvYXQoaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkpLygxMCAqKiA4KSkpLHJlZDIrIkxvc2UgIixyZXMrc3RyKHByb2YpKQogICAgICAgICAgIHByaW50IChTdHlsZS5CUklHSFQrRm9yZS5SRUQrIkxvc2UgVGFyZ2V0Li4uLiEiKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IExvc2UgVGFyZ2V0ICIpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LXRvYXN0IFRvdGFsIEJhbGFuY2UgIitzdHIoZmxvYXQoaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkpLygxMCAqKiA4KSkpCiAgICAgICAgICAgc3lzLmV4aXQoKQogICAgICAgIGlmIGpzblsiUGF5T3V0Il0gaXMgbm90IDA6CiAgICAgICAgICAgbm9fd2luICs9MQogICAgICAgICAgIG5vX2xvc2UgPSAwCiAgICAgICAgICAgYmFsID0gaW50KGpzblsiU3RhcnRpbmdCYWxhbmNlIl0pICsgaW50KGp1bSkKICAgICAgICAgICBpZiBwcm9mID4gMDoKICAgICAgICAgICAgIHByaW50ICh1bmd1KyJbIityZXMrc3RyKHJvbGViZXQpK3VuZ3UrIl0gIitoaWphdTIrc3RyKHJldihzdHIoYW1vdW50KSkpLHJlcytzdHIocmV2KHN0cihiYWwpKSksaGlqYXUyKyJQcm9maXQiLHJlcytzdHIocHJvZikpCiAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgIHByaW50ICh1bmd1KyJbIityZXMrc3RyKHJvbGViZXQpK3VuZ3UrIl0gIitoaWphdTIrc3RyKHJldihzdHIoYW1vdW50KSkpLHJlcytzdHIocmV2KHN0cihiYWwpKSkscmVkMisiTG9zZSAiLHJlcytzdHIocHJvZikpCiAgICAgICAgICAgYW1vdW50ID0gaW50KGFtb3VudCkgKiBmbG9hdChvYmpbIkNvbmZpZyJdW3VydXRdWyJJZiBXaW4iXSkKCiAgICAgICAgZWxzZToKICAgICAgICAgICBub193aW4gPSAwCiAgICAgICAgICAgbm9fbG9zZSArPTEKICAgICAgICAgICBpID0gMAogICAgICAgICAgIGJ1cnN0ID0gVHJ1ZQogICAgICAgICAgIGJhbCA9IGludChqc25bIlN0YXJ0aW5nQmFsYW5jZSJdKSArIGludChqdW0pCiAgICAgICAgICAgaWYgcHJvZiA+IDA6CiAgICAgICAgICAgICBwcmludCAodW5ndSsiWyIrcmVzK3N0cihyb2xlYmV0KSt1bmd1KyJdIityZWQyKyItIitzdHIocmV2KHN0cihhbW91bnQpKSkscmVzK3N0cihyZXYoc3RyKGJhbCkpKSxoaWphdTIrIlByb2ZpdCIscmVzK3N0cihwcm9mKSkKICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgcHJpbnQgKHVuZ3UrIlsiK3JlcytzdHIocm9sZWJldCkrdW5ndSsiXSIrcmVkMisiLSIrc3RyKHJldihzdHIoYW1vdW50KSkpLHJlcytzdHIocmV2KHN0cihiYWwpKSkscmVkMisiTG9zZSAiLHJlcytzdHIocHJvZikpCiAgICAgICAgICAgYW1vdW50ID0gaW50KGFtb3VudCkgKiBmbG9hdChvYmpbIkNvbmZpZyJdW3VydXRdWyJJZiBMb3NlIl0pCiAgICAgICAgaWYgc3RhdHNfaWZfcHJvZml0IGlzIFRydWU6CiAgICAgICAgICAgIGlmIHByb2YgPiBmbG9hdChyZXNldF9pZl9wcm9maXQpOgogICAgICAgICAgICAgICBhbW91bnQgPSBwYXlpbgogICAgICAgICAgICAgICByZXNldF9pZl9wcm9maXQgPSBmbG9hdChwcm9mKStmbG9hdCh0b3RfaWZfcHJvZml0KQoKICAgICAgICBpZiBidXJzdCBpcyBUcnVlOgogICAgICAgICAgIGkrPTEKICAgICAgICAgICBpZiBpID4gbGltaXRfYToKICAgICAgICAgICAgIGkgPSAwCiAgICAgICAgICAgICBidXJzdCA9IEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICBpZiBuID4gbGltaXRfYToKICAgICAgICAgICAgIG4gPSAwCiAgICAgICAgICAgICBhbW91bnQgPSBwYXlpbgoKICAgICAgICBpZiBub193aW4gPiB0b3RhbF93aW46CiAgICAgICAgICAgc3RhdHNfcm9sZWJldF93aW4gPSBUcnVlCiAgICAgICAgICAgc3RhdHNfcm9sZWJldF9sb3NlID0gRmFsc2UKICAgICAgICAgICB0b3RhbF93aW4gKz0xCiAgICAgICAgaWYgbm9fbG9zZSA+IHRvdGFsX2xvc2U6CiAgICAgICAgICAgc3RhdHNfcm9sZWJldF9sb3NlID0gVHJ1ZQogICAgICAgICAgIHN0YXRzX3JvbGViZXRfd2luID0gRmFsc2UKICAgICAgICAgICB0b3RhbF9sb3NlICs9MQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoaGlqYXUrIiAgICAgICAgV2luIFN0cmVhayAiK3JlcytzdHIodG90YWxfd2luKStyZWQrIiBMb3NlIFN0cmVhayAiK3JlcytzdHIodG90YWxfbG9zZSkrIlxyIikKICAgICAgICBpZiBvYmpbIkF1dG8gV2QiXVsiVG9nZ2xlIl0gPT0gIk9uIiBvciBvYmpbIkF1dG8gV2QiXVsiVG9nZ2xlIl0gPT0gIk9OIiBvciBvYmpbIkF1dG8gV2QiXVsiVG9nZ2xlIl0gPT0gIm9uIjoKICAgICAgICAgICBpZiBmbG9hdChyZXYoc3RyKGJhbCkpKSA+IGZsb2F0KG9ialsiQXV0byBXZCJdWyJJZiBCYWxhbmNlIl0pOgogICAgICAgICAgICAgIHdkID0gewogICAgICAgICAgICAgICAgImEiOiAiV2l0aGRyYXciLAogICAgICAgICAgICAgICAgInMiOiBqc1siU2Vzc2lvbkNvb2tpZSJdLAogICAgICAgICAgICAgICAgIkFtb3VudCI6IGludChmbG9hdChvYmpbIkF1dG8gV2QiXVsiQW1vdW50Il0pKigxMCAqKiA4KSksCiAgICAgICAgICAgICAgICAiQWRkcmVzcyI6IG9ialsiQXV0byBXZCJdWyJXYWxsZXQgQWRkcmVzcyJdLAogICAgICAgICAgICAgICAgIlRvdHAiOiAiIiwKICAgICAgICAgICAgICAgICJDdXJyZW5jeSI6ICJkb2dlIgoKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcjEgPSBjLnBvc3QodXJsLGhlYWRlcnM9dWEsZGF0YT13ZCkKICAgICAgICAgICAgICB3aXRoZHJhdyA9IGpzb24ubG9hZHMocjEudGV4dCkKICAgICAgICAgICAgICBwcmludCAoIiIpCiAgICAgICAgICAgICAgcHJpbnQgKCJXaXRoZHJhdyAiK3N0cihyZXYoc3RyKHdpdGhkcmF3WyJQZW5kaW5nIl0pKSkpCiAgICAgICAgICAgICAgd2l0aCBvcGVuKCJoaXN0b3J5LmxvZyIsImErIikgYXMgZjoKICAgICAgICAgICAgICAgICAgZi53cml0ZSgiV2l0aGRyYXcgIitzdHIocmV2KHN0cih3aXRoZHJhd1siUGVuZGluZyJdKSkpKyJcbiIpCiAgICAgICAgICAgICAgc3lzLmV4aXQoKQoKCgogICBleGNlcHQ6CiAgICAgICBwcmludCAoIiIpCiAgICAgICBvcy5zeXN0ZW0oInRlcm11eC10b2FzdCBCZXR0aW5nIFN0b3AiKQogICAgICAgdHJ5OgogICAgICAgICAgd2l0aCBvcGVuKCJoaXN0b3J5LmxvZyIsImErIikgYXMgZjoKICAgICAgICAgICAgICBmLndyaXRlKCJbIitkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJVkvJW0vJWQgJUg6JU06JVMnKSsiXSBXaW4gU3RyZWFrICIrc3RyKHRvdGFsX3dpbikrIiBMb3NlIFN0cmVhayAiK3N0cih0b3RhbF9sb3NlKSsiIHwgQmFsYW5jZSAiK3N0cihmbG9hdChpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKSkvKDEwICoqIDgpKSsiIFByb2ZpdCAiK3N0cihwcm9mKSsiXG4iKQogICAgICAgZXhjZXB0OgogICAgICAgICAgcHJpbnQgKHJlZDIrIkJhbGFuY2UgTm90IEVub3VnaCIpCiAgICAgICBzeXMuZXhpdCgpCnIgPSBjLmdldCh1cmwsaGVhZGVycz11YSxkYXRhPXsiYSI6ICJMb2dpbiIsIktleSI6ICI3ZWM3ZjhhMmM5NzI0YjJjYmI4ZWQ3NWU3MmI0N2VlOSIsIlVzZXJuYW1lIjogb2JqWyJBY2NvdW50Il1bIlVzZXJuYW1lIl0sIlBhc3N3b3JkIjogb2JqWyJBY2NvdW50Il1bIlBhc3N3b3JkIl0sIlRvdHAiOiAiIn0pCmpzID0ganNvbi5sb2FkcyhyLnRleHQpCnRyeToKICBwcmludCAoaGlqYXUrIkJhbGFuY2UgIithYnUyKyI6ICIrcmVzK3N0cihmbG9hdChqc1siRG9nZSJdWyJCYWxhbmNlIl0pLygxMCAqKiA4KSkpCmV4Y2VwdDoKICBwcmludCAoIkNoZWNrIFlvdXIgVXNlcm5hbWUgQW5kIFlvdXIgUGFzc3dvcmQiKQogIHN5cy5leGl0KCkKCgpkaWNlKGludChmbG9hdChvYmpbIlRhcmdldCBXaW4iXSkqKDEwICoqIDgpKSxpbnQoZmxvYXQob2JqWyJMb3NlIFRhcmdldCJdKSooMTAgKiogOCkpKQ=="))
